# -*- coding: utf-8 -*-
"""TCC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4RQq73dctA7eY5_yqNa32T67iAB1Q7r

# Importação de bibliotecas
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""# Importação das bases

## Importação google.colab
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Base Santa Catarina"""

sc = pd.read_csv('/content/drive/MyDrive/Pós/boavista_covid_dados_abertos1.csv', sep=";")

"""## Base Rio Grande do Sul"""

rs = pd.read_csv('/content/drive/MyDrive/Pós/dados_covid_rs.csv')

"""# Eliminação de variáveis não regressoras

## Santa Catarina
"""

sc

sc["obito"].value_counts()

# Na base SC não existe nenhum registro sem informação de óbtio ou não óbito

sc.columns

sc = sc.drop(['data_publicacao','recuperados','data_inicio_sintomas','data_coleta','municipio','regional','data_resultado','codigo_ibge_municipio','latitude','longitude','estado','criterio_confirmacao','tipo_teste','municipio_notificacao','codigo_ibge_municipio_notificacao','latitude_notificacao','longitude_notificacao','origem_esus','origem_sivep','origem_lacen','origem_laboratorio_privado','nom_laboratorio','fez_teste_rapido','fez_pcr','data_internacao','data_entrada_uti','regional_saude','data_evolucao_caso','data_saida_uti','bairro','Unnamed: 41','Unnamed: 42', 'data_obito', 'classificacao', ], axis = 1)

sc.columns

"""## Rio Grande do Sul"""

rs

rs["DATA_INCLUSAO_OBITO"].isnull().sum()

rs = rs.drop(['COD_IBGE','MUNICIPIO','COD_REGIAO_COVID','REGIAO_COVID','FAIXAETARIA','CRITERIO','DATA_SINTOMAS','DATA_INCLUSAO','DATA_EVOLUCAO','EVOLUCAO','OUTROS','ETNIA_INDIGENA','PROFISSIONAL_SAUDE','BAIRRO','SRAG','FONTE_INFORMACAO','PAIS_NASCIMENTO','PES_PRIV_LIBERDADE', 'DATA_EVOLUCAO_ESTIMADA'], axis=1)

"""# Verificação da integridade dos atributos

## Santa Catarina
"""

sc.columns

sc.shape[0]

"""### Raça"""

sc['raca'].value_counts()

## Na base de Santa Catarina, mais de 95% dos indivíduos não teve a variável "raça" descrita, logo, abandonaremos a ideia de prosseguir com essa variável no modelo.

sc = sc.drop(['raca'], axis = 1)
rs = rs.drop(['RACA_COR'], axis = 1)

"""### Idade"""

sc['idade'].value_counts()

sc.loc[sc['idade'].idxmax()]

sc.loc[sc['idade'].idxmin()]

## Nenhum valor negativo e nenhum valor acima dos 120 anos, está factível.

sc.isnull().sum()

sc['idade'].isnull().sum()

## 141 pessoas não tem idade registrada, elas serão retiradas da amostra, por ser impossível entrar em contatos com as mesmas

sc.dropna(subset=['idade'], inplace=True)

sc.shape[0]

"""### Sexo"""

sc['sexo'].value_counts()

sc['sexo'].value_counts().sum()

## Após a exclusão dos 141 indivíduos, sem idade confirmada, ainda restaram 26 indivídeuos sem sexo informado, vamos retirá-los

sc = sc[sc['sexo'] != 'NAO INFORMADO']

sc.shape[0]

"""### Internação"""

sc['internacao'].value_counts()

sc['internacao'].value_counts().sum()

"""### Internação UTI"""

sc['internacao_uti'].value_counts()

sc['internacao_uti'].value_counts().sum()

"""### Comorbidades"""

sc['comorbidades'].unique()

sc['comorbidades'].isnull().sum()

sc['comorbidades'].isna().sum()

sc['comorbidades'].value_counts()

# Não existe algum registro como "não informado" para comorbidades, nem nada no registro do site que indique pra isso.

# Assim vamos assumir que todos os valores nulos são de pessoas sem comorbidades.

comorbidades_divididas_sc = sc['comorbidades'].str.split(', ')

comorbidades_separadas_sc = comorbidades_divididas_sc.explode()

comorbidades_unicas_sc = comorbidades_separadas_sc.drop_duplicates()

comorbidades_unicas_sc;

comorbidades_divididas_rs = rs['CONDICOES'].str.split(', ')

comorbidades_separadas_rs = comorbidades_divididas_rs.explode()

comorbidades_unicas_rs = comorbidades_separadas_rs.drop_duplicates()

comorbidades_unicas_rs;

# Baixa correspondência entre as descrições de ambos os datasets,trataremos todos os valores como várias binárias: "com comorbidade" ou "sem comorbidades"

"""### Sintomas"""

sc['sintomas'].unique()

sc['sintomas'].isnull().sum()

sc['sintomas'].isna().sum()

sc['sintomas'].value_counts()

sintomas_divididos_sc = sc['sintomas'].str.split(', ')

sintomas_separados_sc = sintomas_divididos_sc.explode()

sintomas_unicos_sc = sintomas_separados_sc.drop_duplicates()

sintomas_unicos_sc

"""### Gestante"""

sc['sexo'].value_counts()

sc['gestante'].value_counts()

# A base apresenta 3 valores, idade gestacional, puerpera ou idade gestacional, puerpera.
# Então, com vistas a simplificar os processos, transformaremos os resultados em vari´veis binárias "SIM" e "NÃO"

sc['gestante'].isnull().sum()

"""## Rio Grande do Sul"""

rs.columns

rs.shape[0]

"""### Idade"""

rs['IDADE'].value_counts()

idades_ordenadas_rs = pd.Series(rs['IDADE'].unique()).sort_values()

idades_ordenadas_rs.unique()

rs.loc[rs['IDADE'].idxmax()]

rs.loc[rs['IDADE'].idxmin()]

len(rs[rs['IDADE'] > 120])

## A pessoa mais velha encontrada no registro apresenta 390 anos, o que é incompatível com a realidade. Ao todo foram encontrados 225
## registros com mais de 120 anos, idade mais velha de SC. Por precaução, todos serão excluídos

rs = rs.loc[rs['IDADE'] <= 120]

rs.shape[0]

rs['IDADE'].isnull().sum()

#Nenhuma pessoa sem idade registrada encontrada

"""### Sexo"""

rs['SEXO'].value_counts()

rs['SEXO'].isnull().sum()

# Ninguém sem esse registro

"""### Internação"""

rs['HOSPITALIZADO'].value_counts()

rs['HOSPITALIZADO'].isnull().sum()

"""### Internação UTI"""

rs['UTI'].value_counts()

rs['UTI'].value_counts().sum()

rs['UTI'].isnull().sum()

"""### Gestante"""

rs['SEXO'].value_counts()

rs['GESTANTE'].value_counts()

rs['GESTANTE'].isnull().sum()

"""### Febre"""

# Pela base do RS ser mais robusta e apresentar menos inconsistências, trataremos ela como principal e adequaremos a base de SC a ela.

rs['FEBRE'].value_counts()

rs['GESTANTE'].isnull().sum()

"""### Tosse"""

rs['TOSSE'].value_counts()

rs['GESTANTE'].isnull().sum()

"""### Garganta"""

rs['GARGANTA'].value_counts()

rs['GARGANTA'].isnull().sum()

rs.shape[0]

rs.dropna(subset=['GARGANTA'], inplace=True)

rs.shape[0]

"""### Dispneia"""

rs['DISPNEIA'].value_counts()

rs['DISPNEIA'].isnull().sum()

rs.shape[0]

rs.dropna(subset=['DISPNEIA'], inplace=True)

rs.shape[0]

"""# Tratamento de Variáveis

## Santa Catarina

### Gestante
"""

sc['gestante'].value_counts()

sc['gestante'].isnull().sum()

sc['gestante'] = sc['gestante'].fillna('NÃO GESTANTE')

sc['gestante'].value_counts()

sc['gestante'].isnull().sum()

sc['gestante'] = sc['gestante'].replace({'IDADE GESTACIONAL': 'GESTANTE',
                                         'PUERPERA': 'GESTANTE',
                                         'IDADE GESTACIONAL, PUERPERA': 'GESTANTE'})

"""### Comorbidades"""

sc

sc['comorbidades'].isnull().sum()

sc['comorbidades'].value_counts().sum()

sc['comorbidades'] = sc['comorbidades'].map(lambda x: 'com comorbidades' if pd.notnull(x) else 'sem comorbidades')
sc['comorbidades'] = sc['comorbidades'].fillna('sem comorbidades')

sc['comorbidades'].value_counts()

"""### Sintomas"""

palavras_chave = ['TOSSE', 'DOR DE GARGANTA', 'DISPNEIA', 'FEBRE']

for palavra in palavras_chave:
    sc[palavra] = 'não'

for palavra in palavras_chave:
    sc[palavra] = sc['sintomas'].str.contains(palavra, case=False, na=False).map({True: 'sim', False: 'não'})

sc = sc.drop(['sintomas'], axis=1)

sc.columns

sc.value_counts('TOSSE')

sc.value_counts('DOR DE GARGANTA')

sc.value_counts('DISPNEIA')

sc.value_counts('FEBRE')

"""### Renomeando colunas"""

sc = sc.rename(columns={'sexo': 'SEXO', 'gestante': 'GESTANTE', 'comorbidades': 'CONDICOES', 'internacao': 'HOSPITALIZADO', 'internacao_uti': 'UTI', 'obito': 'OBITO', 'idade': 'IDADE', 'raca': 'RACA_COR', 'raca': 'RACA_COR', 'DOR DE GARGANTA': 'GARGANTA'})

sc.columns.sort

rs.columns.sort

"""## Rio Grande do Sul

### Criando a variável óbito
"""

rs['DATA_INCLUSAO_OBITO'].value_counts().sum()

rs['DATA_INCLUSAO_OBITO'].isnull().sum()

rs['DATA_INCLUSAO_OBITO'].value_counts().sum() + rs['DATA_INCLUSAO_OBITO'].isnull().sum()

rs.shape[0]

rs['OBITO'] = rs['DATA_INCLUSAO_OBITO'].apply(lambda x: 'sim' if pd.notna(x) else 'não')

rs['OBITO'].value_counts()

rs = rs.drop(['DATA_INCLUSAO_OBITO','DATA_CONFIRMACAO'], axis=1)

"""# Uniformizando e unindo as bases"""

sc.columns.sort_values()

rs.columns.sort_values()

rs.shape

sc.shape

df_definitivo = pd.concat([rs, sc], ignore_index=True)

df_definitivo.shape

"""# Padronização dos valores para criação de dummies binárias

## Condições
"""

df_definitivo['CONDICOES'].value_counts().sum()

df_definitivo['CONDICOES'].isnull().sum()

df_definitivo['CONDICOES'] = df_definitivo['CONDICOES'].apply(lambda x: 'COM CONDICOES' if pd.notna(x) else x)

df_definitivo['CONDICOES'].fillna('SEM CONDICOES', inplace=True)

df_definitivo['CONDICOES'].value_counts()

"""## Dispneia"""

df_definitivo['DISPNEIA'].value_counts()

df_definitivo['DISPNEIA'].value_counts().sum()

df_definitivo['DISPNEIA'] = df_definitivo['DISPNEIA'].replace('NAO', 'SEM DISPNEIA')
df_definitivo['DISPNEIA'] = df_definitivo['DISPNEIA'].replace('não', 'SEM DISPNEIA')
df_definitivo['DISPNEIA'] = df_definitivo['DISPNEIA'].replace('SIM', 'COM DISPNEIA')
df_definitivo['DISPNEIA'] = df_definitivo['DISPNEIA'].replace('sim', 'COM DISPNEIA')

df_definitivo['DISPNEIA'].value_counts()

df_definitivo['DISPNEIA'].value_counts().sum()

"""## Febre"""

df_definitivo['FEBRE'].value_counts()

df_definitivo['FEBRE'].value_counts().sum()

df_definitivo['FEBRE'] = df_definitivo['FEBRE'].replace('NAO', 'SEM FEBRE')
df_definitivo['FEBRE'] = df_definitivo['FEBRE'].replace('não', 'SEM FEBRE')
df_definitivo['FEBRE'] = df_definitivo['FEBRE'].replace('SIM', 'COM FEBRE')
df_definitivo['FEBRE'] = df_definitivo['FEBRE'].replace('sim', 'COM FEBRE')

df_definitivo['FEBRE'].value_counts()

df_definitivo['FEBRE'].value_counts().sum()

"""## Garganta"""

df_definitivo['GARGANTA'].value_counts()

df_definitivo['GARGANTA'].value_counts().sum()

df_definitivo['GARGANTA'] = df_definitivo['GARGANTA'].replace('NAO', 'SEM DOR GARGANTA')
df_definitivo['GARGANTA'] = df_definitivo['GARGANTA'].replace('não', 'SEM DOR GARGANTA')
df_definitivo['GARGANTA'] = df_definitivo['GARGANTA'].replace('SIM', 'COM DOR GARGANTA')
df_definitivo['GARGANTA'] = df_definitivo['GARGANTA'].replace('sim', 'COM DOR GARGANTA')

df_definitivo['GARGANTA'].value_counts()

df_definitivo['GARGANTA'].value_counts().sum()

"""## Gestante"""

df_definitivo['GESTANTE'].value_counts()

df_definitivo['GESTANTE'].value_counts().sum()

df_definitivo['GESTANTE'] = df_definitivo['GESTANTE'].replace('NAO', 'NÃO GESTANTE')
df_definitivo['GESTANTE'] = df_definitivo['GESTANTE'].replace('SIM', 'GESTANTE')

df_definitivo['GESTANTE'].value_counts()

df_definitivo['GESTANTE'].value_counts().sum()

"""## Óbito"""

df_definitivo['OBITO'].value_counts()

df_definitivo['OBITO'].value_counts().sum()

df_definitivo['OBITO'] = df_definitivo['OBITO'].replace('não', 'NAO')
df_definitivo['OBITO'] = df_definitivo['OBITO'].replace('sim', 'SIM')

df_definitivo['OBITO'].value_counts()

df_definitivo['OBITO'].value_counts().sum()

"""## Hospitalizado"""

df_definitivo['HOSPITALIZADO'].value_counts()

df_definitivo['HOSPITALIZADO'].value_counts().sum()

df_definitivo['HOSPITALIZADO'] = df_definitivo['HOSPITALIZADO'].replace('NAO', 'NAO INTERNADO')
df_definitivo['HOSPITALIZADO'] = df_definitivo['HOSPITALIZADO'].replace('SIM', 'INTERNADO')

df_definitivo['HOSPITALIZADO'].value_counts()

df_definitivo['HOSPITALIZADO'].value_counts().sum()

"""## Sexo"""

df_definitivo['SEXO'].value_counts()

df_definitivo['SEXO'].value_counts().sum()

df_definitivo['SEXO'] = df_definitivo['SEXO'].replace('Feminino', 'FEMININO')
df_definitivo['SEXO'] = df_definitivo['SEXO'].replace('Masculino', 'MASCULINO')

df_definitivo['SEXO'].value_counts()

df_definitivo['SEXO'].value_counts().sum()

"""## Tosse"""

df_definitivo['TOSSE'].value_counts()

df_definitivo['TOSSE'].value_counts().sum()

df_definitivo['TOSSE'] = df_definitivo['TOSSE'].replace('NAO', 'SEM TOSSE')
df_definitivo['TOSSE'] = df_definitivo['TOSSE'].replace('não', 'SEM TOSSE')
df_definitivo['TOSSE'] = df_definitivo['TOSSE'].replace('SIM', 'COM TOSSE')
df_definitivo['TOSSE'] = df_definitivo['TOSSE'].replace('sim', 'COM TOSSE')

df_definitivo['TOSSE'].value_counts()

df_definitivo['TOSSE'].value_counts().sum()

"""## UTI"""

df_definitivo['UTI'].value_counts()

df_definitivo['UTI'].value_counts().sum()

df_definitivo['UTI'] = df_definitivo['UTI'].replace('NAO', 'NAO INTERNADO UTI')
df_definitivo['UTI'] = df_definitivo['UTI'].replace('SIM', 'INTERNADO UTI')

df_definitivo['UTI'].value_counts()

df_definitivo['UTI'].value_counts().sum()

"""# Geração das dummies binárias"""

display(df_definitivo)

for coluna in df_definitivo.columns:
    frequencia = df_definitivo[coluna].value_counts()
    print(frequencia)

df_definitivo.columns

dummies = pd.get_dummies(df_definitivo[['SEXO', 'HOSPITALIZADO', 'UTI', 'FEBRE', 'TOSSE', 'GARGANTA', 'DISPNEIA', 'CONDICOES', 'GESTANTE']])

dummies.columns

df_definitivo = pd.concat([df_definitivo, dummies], axis=1)

df_definitivo

df_definitivo.columns

df_definitivo = df_definitivo.drop(['SEXO','HOSPITALIZADO','UTI','FEBRE','TOSSE','GARGANTA','DISPNEIA','CONDICOES','GESTANTE'], axis = 1)

df_definitivo.columns

"""# Análise e Exploração de Dados"""

df_definitivo.shape

valores_nulos_por_coluna = df_definitivo.isnull().sum()
tabela_valores_nulos = pd.DataFrame({
    'Coluna': valores_nulos_por_coluna.index,
    'Valores Nulos': valores_nulos_por_coluna.values
})
print(tabela_valores_nulos)

df_definitivo.value_counts()

soma_por_coluna = df_definitivo.drop(columns=["IDADE", "OBITO"]).sum()
tabela_soma = pd.DataFrame({"Coluna": soma_por_coluna.index, "Soma": soma_por_coluna.values})
print(tabela_soma)

fig, axs = plt.subplots(2, 2, figsize=(12, 10))
df_definitivo[['HOSPITALIZADO_INTERNADO', 'HOSPITALIZADO_NAO INTERNADO']].sum().plot(kind='bar', rot=0, ax=axs[0, 0])
axs[0, 0].set_title('Hospitalizado Internado vs Hospitalizado Não Internado')
axs[0, 0].set_xlabel('')
axs[0, 0].set_ylabel('Contagem')
df_definitivo[['UTI_INTERNADO UTI', 'UTI_NAO INTERNADO UTI']].sum().plot(kind='bar', rot=0, ax=axs[0, 1])
axs[0, 1].set_title('UTI Internado vs UTI Não Internado')
axs[0, 1].set_xlabel('Categoria')
axs[0, 1].set_ylabel('Contagem')
df_definitivo[['DISPNEIA_COM DISPNEIA', 'DISPNEIA_SEM DISPNEIA']].sum().plot(kind='bar', rot=0, ax=axs[1, 0])
axs[1, 0].set_title('Dispneia com Dispneia vs Dispneia sem Dispneia')
axs[1, 0].set_xlabel('Categoria')
axs[1, 0].set_ylabel('Contagem')
df_definitivo[['GESTANTE_GESTANTE', 'GESTANTE_NÃO GESTANTE']].sum().plot(kind='bar', rot=0, ax=axs[1, 1])
axs[1, 1].set_title('Gestante vs Não Gestante')
axs[1, 1].set_xlabel('Categoria')
axs[1, 1].set_ylabel('Contagem')

from scipy.stats import norm
df_definitivo = df_definitivo.sort_values(by='IDADE')
media = df_definitivo['IDADE'].mean()
desvio_padrao = df_definitivo['IDADE'].std()
plt.figure(figsize=(10, 6))
plt.hist(df_definitivo['IDADE'], bins=20, density=True, color='skyblue', edgecolor='black', alpha=0.7)
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, media, desvio_padrao)
plt.plot(x, p, 'k', linewidth=2)
plt.xlabel('Idade')
plt.ylabel('Densidade de Probabilidade')
plt.title('Distribuição de Idade com Curva Normal')
plt.show()

contagem_obito = df_definitivo['OBITO'].value_counts()
plt.figure(figsize=(8, 6))
sns.countplot(x='OBITO', data=df_definitivo, palette='Set2')
plt.title('Frequência de Resultados na Coluna "OBITO"')
plt.xlabel('Resultado')
plt.ylabel('Frequência')
plt.show()

"""# Divisão da base em treinamento e teste"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from yellowbrick.classifier import ConfusionMatrix

outras_colunas = [coluna for coluna in df_definitivo.columns if coluna != 'OBITO']

novas_colunas = outras_colunas + ['OBITO']

df_definitivo = df_definitivo[novas_colunas]

df_definitivo

X_base = df_definitivo.iloc[:, 0:18].values

y_base = df_definitivo.iloc[:, 19].values

X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(X_base, y_base, test_size = 0.15, random_state = 0)

X_treinamento.shape

X_teste.shape

y_treinamento.shape

y_teste.shape

"""# Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

naive_base = GaussianNB()
naive_base.fit(X_treinamento, y_treinamento)

previsoes = naive_base.predict(X_teste)

previsoes

accuracy_score(y_teste, previsoes)

cm = ConfusionMatrix(naive_base)
cm.fit(X_treinamento, y_treinamento)
cm.score(X_teste, y_teste)

print(classification_report(y_teste, previsoes))

"""# Árvore de Decisão"""

from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier

parametros = {'criterion': ['gini', 'entropy'],
              'splitter': ['best', 'random'],
              'min_samples_split': [2, 5, 10],
              'min_samples_leaf': [1, 5, 10]}

grid_search = GridSearchCV(estimator=DecisionTreeClassifier(), param_grid=parametros)
grid_search.fit(X_base, y_base)
melhores_parametros = grid_search.best_params_
melhor_resultado = grid_search.best_score_
print(melhores_parametros)
print(melhor_resultado)

arvore = DecisionTreeClassifier(criterion="gini",splitter="random", min_samples_split=10,min_samples_leaf=10,random_state=0)

arvore.fit(X_treinamento, y_treinamento)

from sklearn import tree
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
tree.plot_tree(arvore, max_depth=3, filled=True, rounded=True)
plt.show()

previsoes = arvore.predict(X_teste)

accuracy_score(y_teste, previsoes)

cm = ConfusionMatrix(arvore)
cm.fit(X_treinamento, y_treinamento)
cm.score(X_teste, y_teste)

print(classification_report(y_teste, previsoes))

"""# Random Forest"""

from sklearn.ensemble import RandomForestClassifier
random_forest = RandomForestClassifier(n_estimators=40, criterion='entropy', random_state = 0)
random_forest.fit(X_treinamento, y_treinamento)

previsoes = random_forest.predict(X_teste)
previsoes

y_teste

accuracy_score(y_teste, previsoes)

cm = ConfusionMatrix(random_forest)
cm.fit(X_treinamento, y_treinamento)
cm.score(X_teste, y_teste)

print(classification_report(y_teste, previsoes))